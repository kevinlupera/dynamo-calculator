{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { encode } from \"utf8\";\nimport { marshall } from \"@aws-sdk/util-dynamodb\";\nimport Decimal, { Numeric } from \"decimal.js-light\";\n\nconst BASE_LOGICAL_SIZE_OF_NESTED_TYPES = 1;\nconst LOGICAL_SIZE_OF_EMPTY_DOCUMENT = 3;\nconst LIMIT_SIZE_DYNAMO_BYTES = 4096;\n\nexport function determineLargestAttribute(attributeSizes: any): string {\n  let largestAttribute = \"\";\n  let maxSize = 0;\n\n  for (let currentAttribute in attributeSizes) {\n    if (!attributeSizes.hasOwnProperty(currentAttribute)) continue;\n\n    let { total: currentSize } = attributeSizes[currentAttribute];\n    if (currentSize > maxSize) {\n      maxSize = currentSize;\n      largestAttribute = currentAttribute;\n    }\n  }\n\n  return largestAttribute;\n}\n\nexport function calculateItemSizeInBytes(item: any) {\n  let sizes: {\n    [key: string]: { sizeOfName: number; attributeSize: number; total: number };\n  } = {};\n  let totalSize = 0;\n\n  for (let name in item) {\n    if (!item.hasOwnProperty(name)) continue;\n\n    let size = {\n      sizeOfName: encode(name).length,\n      attributeSize: calculateAttributeSizeInBytes(item[name]),\n      total: 0,\n    };\n    size.total = size.sizeOfName + size.attributeSize;\n\n    totalSize += size.total;\n    sizes[name] = size;\n  }\n\n  return { size: totalSize, sizes };\n}\n\nfunction calculateAttributeSizeInBytes(attr: {\n  hasOwnProperty: (arg0: string) => any;\n  B: string;\n  S: string;\n  N: any;\n  BS: string | any[];\n  SS: string | any[];\n  NS: string | any[];\n  M: { [x: string]: any; hasOwnProperty: (arg0: string) => any };\n  L: string | any[];\n}) {\n  if (!attr) return 0;\n\n  // Binary\n  if (attr.hasOwnProperty(\"B\")) {\n    return atob(attr.B).length;\n  }\n\n  // String\n  if (attr.hasOwnProperty(\"S\")) {\n    return encode(attr.S).length;\n  }\n\n  // Number\n  if (attr.hasOwnProperty(\"N\")) {\n    return calculateNumberSizeInBytes(attr.N);\n  }\n\n  // BinarySet\n  if (attr.hasOwnProperty(\"BS\")) {\n    let size = 0;\n\n    for (let i = 0; i < attr.BS.length; i++) {\n      size += atob(attr.BS[i]).length;\n    }\n\n    return size;\n  }\n\n  // StringSet\n  if (attr.hasOwnProperty(\"SS\")) {\n    let size = 0;\n\n    for (let i = 0; i < attr.SS.length; i++) {\n      size += encode(attr.SS[i]).length;\n    }\n\n    return size;\n  }\n\n  //  NumberSet\n  if (attr.hasOwnProperty(\"NS\")) {\n    let size = 0;\n\n    for (let i = 0; i < attr.NS.length; i++) {\n      size += calculateNumberSizeInBytes(attr.NS[i]);\n    }\n\n    return size;\n  }\n\n  // Boolean\n  if (attr.hasOwnProperty(\"BOOL\")) {\n    return 1;\n  }\n\n  // Null\n  if (attr.hasOwnProperty(\"NULL\")) {\n    return 1;\n  }\n\n  // Map\n  if (attr.hasOwnProperty(\"M\")) {\n    let size = LOGICAL_SIZE_OF_EMPTY_DOCUMENT;\n\n    for (let name in attr.M) {\n      if (!attr.M.hasOwnProperty(name)) continue;\n\n      size += encode(name).length;\n      size += calculateAttributeSizeInBytes(attr.M[name]);\n      size += BASE_LOGICAL_SIZE_OF_NESTED_TYPES;\n    }\n\n    return size;\n  }\n\n  // List\n  if (attr.hasOwnProperty(\"L\")) {\n    let size = LOGICAL_SIZE_OF_EMPTY_DOCUMENT;\n\n    for (let i = 0; i < attr.L.length; i++) {\n      size += calculateAttributeSizeInBytes(attr.L[i]);\n      size += BASE_LOGICAL_SIZE_OF_NESTED_TYPES;\n    }\n\n    return size;\n  }\n\n  throw \"unknown data type in \" + JSON.stringify(attr);\n}\n\nfunction calculateNumberSizeInBytes(n: Numeric | string) {\n  let decimal = new Decimal(n);\n  if (decimal.isZero()) return 1;\n  let fixed = decimal.toFixed();\n  let size = measure(fixed.replace(\"-\", \"\")) + 1;\n  if (fixed.startsWith(\"-\")) size++;\n  if (size > 21) size = 21;\n  return size;\n}\n\nfunction measure(n: string) {\n  if (n.indexOf(\".\") !== -1) {\n    let parts = n.split(\".\");\n    let p0 = parts[0];\n    let p1 = parts[1];\n    if (p0 === \"0\") {\n      p0 = \"\";\n      p1 = zeros(p1, true);\n    }\n    if (p0.length % 2 !== 0) p0 = \"Z\" + p0;\n    if (p1.length % 2 !== 0) p1 = p1 + \"Z\";\n    return measure(p0 + p1);\n  }\n  n = zeros(n, true, true);\n  return Math.ceil(n.length / 2);\n}\n\nfunction zeros(n: any, left: any, right = false) {\n  while (left && true) {\n    let t = n.replace(/^(0{2})/, \"\");\n    if (t.length == n.length) break;\n    n = t;\n  }\n  while (right && true) {\n    let t = n.replace(/(0{2})$/, \"\");\n    if (t.length == n.length) break;\n    n = t;\n  }\n  return n;\n}\n\nexport function calculateItemSize(item: any): {\n  size: number;\n  sizes: any;\n  largestAttribute: string;\n} {\n  const { size, sizes } = calculateItemSizeInBytes(marshall(item));\n  const largestAttribute = determineLargestAttribute(sizes);\n  return { size, sizes, largestAttribute };\n}\n\nexport function isItem4KBAllowed(item: any) {\n  const { size } = calculateItemSize(item);\n  return size <= LIMIT_SIZE_DYNAMO_BYTES;\n}\n\nexport function calculateCapacityDynamo(item: any): {\n  rcus: number;\n  rcusEventualConsistency: number;\n  rcusPartOfATransaction: number;\n  wcus: number;\n  wcusPartOfATransaction: number;\n} {\n  const { size } = calculateItemSizeInBytes(marshall(item));\n  const rcus = Math.ceil(size / 4096);\n  const rcusEventualConsistency = rcus / 2;\n  const rcusPartOfATransaction = rcus * 2;\n  const wcus = Math.ceil(size / 1024);\n  const wcusPartOfATransaction = wcus * 2;\n  return {\n    rcus,\n    rcusEventualConsistency,\n    rcusPartOfATransaction,\n    wcus,\n    wcusPartOfATransaction,\n  };\n}\n"],"mappings":"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","names":["Decimal"]}